<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scott Codes</title>
    <description>General coding things, usually in Ruby, that come out of my head.
</description>
    <link>http://scottmatthewman.github.io/</link>
    <atom:link href="http://scottmatthewman.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 25 Aug 2015 17:36:17 +0100</pubDate>
    <lastBuildDate>Tue, 25 Aug 2015 17:36:17 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Optimise your Ruby logs with blocks</title>
        <description>&lt;p&gt;When adding logger statements to Ruby or Rails apps, we&amp;#39;re used to providing interpolated strings to whichever method matches the status level of our message:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Number of items matching our requirements: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:valid?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Whether or not this string gets output to the log is dependent on the logger instance&amp;#39;s &lt;code&gt;#level&lt;/code&gt; property, which can vary (say, between development and production environments).&lt;/p&gt;

&lt;p&gt;However, even if the &lt;code&gt;logger.level&lt;/code&gt; determines that the text should not be output to the log, any ruby code called by the interpolated string will still be executed.&lt;/p&gt;

&lt;p&gt;As an alternative, each of the &lt;code&gt;Logger&lt;/code&gt; class&amp;#39;s logging methods can take a block that returns a string. This block will only be called, and any Ruby code within will only be executed, if the severity is of a sufficient level to be output to the log:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WARN&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# String parameter - Calculated, but not displayed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Retrieved items: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Block - Skipped completely&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Retrieved items: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So if your debugging messages are expensive in terms of processing, leaving them &lt;em&gt;in situ&lt;/em&gt; in production code won&amp;#39;t affect your application&amp;#39;s overall performance as long as you&amp;#39;re mindful of your server&amp;#39;s logging level.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This blog post came out of &lt;a href=&quot;https://github.com/altmetric/til/blob/master/ruby/logger_blocks.md&quot;&gt;an entry&lt;/a&gt; in the &lt;a href=&quot;https://github.com/altmetric/til&quot;&gt;Altmetric TIL (Today I Learned) library&lt;/a&gt;, an open source collection of knowledge that Altmetric developers have stumbled across in our working days. Feel free to have a look around!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2015 13:36:09 +0100</pubDate>
        <link>http://scottmatthewman.github.io/2015/08/24/optimise-your-ruby-logs-with-blocks.html</link>
        <guid isPermaLink="true">http://scottmatthewman.github.io/2015/08/24/optimise-your-ruby-logs-with-blocks.html</guid>
        
        
      </item>
    
  </channel>
</rss>
